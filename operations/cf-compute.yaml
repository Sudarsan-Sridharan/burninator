AWSTemplateFormatVersion: "2010-09-09"

Resources:

  HostsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: "hostsrole"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: ["*"]


  Cluster:
    Type: AWS::ECS::Cluster

  HostsProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref HostsRole

  HostsConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0285183bbef6224bd
      InstanceType: t2.medium
      SecurityGroups:
        - !ImportValue network-AttachedNetworkDefaultSecurityGroup
      IamInstanceProfile: !Ref HostsProfile
      KeyName: wavelet
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xe\n"
              - efsvol=
              - !ImportValue burninator-data:DataVolume
              - "\n"
              - !Sub |
                  exec > /root/init.log 2>&1
                  echo $efsvol
                  echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
                  yum install -y aws-cfn-bootstrap amazon-efs-utils
                  mkdir -p /home/ec2-user/efs-mount-point
                  mount -t efs $efsvol:/ /home/ec2-user/efs-mount-point/
                  chown ec2-user /home/ec2-user/efs-mount-point
                  # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SOMETHINGGOESHERE --region ${AWS::Region}


  Hosts:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !ImportValue network-AttachedNetworkLeftSubnetAZ
        - !ImportValue network-AttachedNetworkRightSubnetAZ
      LaunchConfigurationName: !Ref HostsConfig
      Tags:
        - Key: Name
          Value: Burninator
          PropagateAtLaunch: true
      MaxSize: 5
      MinSize: 2
      VPCZoneIdentifier:
        - !ImportValue network-AttachedNetworkLeftSubnet
        - !ImportValue network-AttachedNetworkRightSubnet

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Container firewall rules
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      VpcId: !ImportValue network-AttachedNetwork

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      SecurityGroups:
        - !Ref ContainerSecurityGroup
      Subnets:
        - !ImportValue network-AttachedNetworkLeftSubnet
        - !ImportValue network-AttachedNetworkRightSubnet
      Type: application


# Outputs:
#   LoadBalancerAddress:
#     Value: !GetAtt LoadBalancer.DNSName

Outputs:
  Cluster:
    Value: !Ref Cluster
    Export:
      Name: !Sub ${AWS::StackName}:Cluster
  LoadBalancer:
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancer
  LoadBalancerArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerArn
