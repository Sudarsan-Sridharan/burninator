AWSTemplateFormatVersion: "2010-09-09"

Resources:

  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
                Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !ImportValue burninator-logs:WriteLogsPolicyArn
        - !ImportValue burninator-config:DecryptSecretsPolicyArn
        - !ImportValue burninator-data:PutToBackupStorePolicyArn

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      Family: !Sub ${AWS::StackName}-BurninatorServiceTask
      Memory: 3172
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      ContainerDefinitions:
        - Name: ServiceTask
          PortMappings:
            - ContainerPort: 3011
              HostPort: 80
          ExtraHosts:
            - Hostname: jira.cnvrmedia.net
              IpAddress: 10.110.192.10
          Image: !ImportValue burninator-repository:RuntimeRepository
          Memory: 3172
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue burninator-logs:LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            - SourceVolume: EFS
              ContainerPath: /app/data
              ReadOnly: false
      Volumes:
        - Name: EFS
          Host:
            SourcePath: /home/ec2-user/efs-mount-point/burninator

  BackupTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      Family: !Sub ${AWS::StackName}-BurninatorBackupTask
      Memory: 256
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      ContainerDefinitions:
        - Name: BackupTask
          PortMappings:
            - ContainerPort: 3011
              HostPort: 80
          ExtraHosts:
            - Hostname: jira.cnvrmedia.net
              IpAddress: 10.110.192.10
          Image: !ImportValue burninator-repository:RuntimeRepository
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue burninator-logs:LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            - SourceVolume: EFS
              ContainerPath: /app/data
              ReadOnly: false
          Environment:
            - Name: BACKUP_BUCKET
              Value: !ImportValue burninator-data:BackupStore
          Command:
            - ./scripts/backupaws.sh
      Volumes:
        - Name: EFS
          Host:
            SourcePath: /home/ec2-user/efs-mount-point/burninator

  BurninatorService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue burninator-compute:Cluster
      DesiredCount: 1
      TaskDefinition: !Ref Task
      LoadBalancers:
        - ContainerName: ServiceTask
          ContainerPort: 3011
          TargetGroupArn: !Ref HTTPTarget


  HTTPTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue network-AttachedNetwork


Outputs:
  Service:
    Value: !GetAtt BurninatorService.Name
    Export:
      Name: !Sub ${AWS::StackName}:Service
  ServiceArn:
    Value: !Ref BurninatorService
    Export:
      Name: !Sub ${AWS::StackName}:ServiceArn
  HTTPTarget:
    Value: !Ref HTTPTarget
    Export:
      Name: !Sub ${AWS::StackName}:HTTPTarget

